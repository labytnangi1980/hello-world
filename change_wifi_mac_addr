#!/usr/bin/env python

"""Utility generate random MAC address and set it on Mac OS X.
Run this only as superuser (you can use 'sudo').
The utility automaticaly select the first Wi-Fi interface.
Or you can specify inteface name in the command line:
> sudo change_wifi_mac_addr en1
"""

import random
import subprocess
import sys
import os

AIRPORT_BINARY = '/System/Library/PrivateFrameworks/Apple80211.framework\
/Versions/Current/Resources/airport'
NETWORKSETUP_BINARY = '/usr/sbin/networksetup'

def get_current_network_name():
    """Return current wifi-network name"""
    network_name = ""
    try:
        output = subprocess.check_output(AIRPORT_BINARY + ' -I', shell=True)[:-1]
    except subprocess.CalledProcessError as err:
        print str(err)
        sys.exit(1)
    # find the line with "SSID: network_name" string
    for line in output.split('\n'):
        if line.find('SSID:') > -1:
            network_name = line.split(':')[1].strip()
    return network_name

def get_wifi_adapter_name():
    """Return first wifi adapter name"""
    adapter_name = ""
    try:
        output = subprocess.check_output(NETWORKSETUP_BINARY + ' -listallhardwareports',
                                         shell=True)[:-2]
    except subprocess.CalledProcessError as err:
        print str(err)
        sys.exit(1)
    # find the line with first wi-fi device name
    for line in output.split('\n\n'):
        if line.find('Hardware Port: Wi-Fi') > -1:
            adapter_name = line.strip('\n').split('\n')[1].split(':')[1].strip()
    return adapter_name

def generate_new_mac():
    """Generate and return new random MAC address"""
    new_mac_addr = ""
    # generate random MAC address and clear multicast bit
    rand_addr = "%012x" % (random.randint(1, 2**48-1) & (~(2**40)))
    # add ':' byte separator
    for index in range(len(rand_addr) - 2):
        if index % 2:
            new_mac_addr = new_mac_addr + rand_addr[index] + ":"
        else:
            new_mac_addr = new_mac_addr + rand_addr[index]
    new_mac_addr += rand_addr[-2:]
    return new_mac_addr

def disconnect_from_wifi():
    """Disconnect from current WIFI network"""
    exit_status = subprocess.call(AIRPORT_BINARY + ' -z', shell=True)
    return exit_status

def change_mac_addr(interface, new_addr):
    """Change MAC address on interface to new_addr"""
    cmd = '/sbin/ifconfig ' + interface + ' ether ' + new_addr
    exit_status = subprocess.call(cmd, shell=True)
    return exit_status

def main():
    """Main function"""
    # check user id for the current process
    if os.geteuid():
        print "You need superuser privileges"
        sys.exit(1)

    current_network = get_current_network_name()

    if disconnect_from_wifi():
        print "Cannot disconnect from wi-fi network"
        sys.exit(1)

    if len(sys.argv) > 1:
        interface_name = sys.argv[1]
    else:
        interface_name = get_wifi_adapter_name()
    new_mac = generate_new_mac()
    print "Change MAC address on %s" % interface_name
    if change_mac_addr(interface_name, new_mac):
        print "Cannot change MAC address on %s" % interface_name
        sys.exit(1)

    print 'Success! New MAC address is %s' % new_mac
    print 'Don\'t forget to connect to your network!'
    if current_network:
        print 'Hint: last network name is "' + current_network + '"'

if __name__ == '__main__':
    main()
